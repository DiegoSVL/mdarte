##
##  MACROS
##
#macro(processVOFields $vo)
#foreach ($field in $vo.type.attributes)
	
	private $field.type.fullyQualifiedName $field.name;
	
	public $field.type.fullyQualifiedName ${field.getterName}()
    {
		return this.${vo.name}.${field.getterName}();    
    }
    public void ${field.setterName}($field.type.fullyQualifiedName ${field.name})
    {
    	this.${vo.name}.${field.setterName}(${field.name});
    }
#end
#end

#macro(processVOFieldsInterface $vo)
#foreach ($field in $vo.type.attributes)
	
	public $field.type.fullyQualifiedName ${field.getterName}();
	
    public void ${field.setterName}($field.type.fullyQualifiedName ${field.name});

#end
#end

#macro(processListsClasses)
public final static class LabelValue
    {
        private java.lang.Object label = null;
        private java.lang.Object value = null;
        private java.lang.Object hint = null;        

        public LabelValue(Object label, java.lang.Object value)
        {
            this.label = label;
            this.value = value;
        }

        public LabelValue(Object label, java.lang.Object value, Object hint)
        {
            this.label = label;
            this.value = value;
            this.hint = hint;
        }

        public java.lang.Object getLabel()
        {
            return this.label;
        }

        public java.lang.Object getValue()
        {
            return this.value;
        }
        
	public java.lang.Object getHint()
        {
            return this.hint;
        }        

        public java.lang.String toString()
        {
            return label + "=" + value;
        }
    }
    
    public final static class LabelValueDouble
    {
        private java.lang.Object labelDouble = null;
        private java.lang.Object label = null;
        private java.lang.Object value = null;

        public LabelValueDouble(Object label, Object labelDouble, java.lang.Object value)
        {
            this.label = label;
            this.labelDouble = labelDouble;
            this.value = value;
        }

        public java.lang.Object getLabel()
        {
            return this.label;
        }
        
        public java.lang.Object getLabelDouble()
        {
            return this.labelDouble;
        }

        public java.lang.Object getValue()
        {
            return this.value;
        }

        public java.lang.String toString()
        {
            return label + "," + labelDouble + "=" + value;
        }
    }
    
    
    public final static class LabelValueDestination
    {
        private java.lang.Object labelDestination = null;
        private java.lang.Object label = null;
        private java.lang.Object value = null;

        public LabelValueDestination(Object label, Object labelDestination, java.lang.Object value)
        {
            this.label = label;
            this.labelDestination = labelDestination;
            this.value = value;
        }

        public java.lang.Object getLabel()
        {
            return this.label;
        }
        
        public java.lang.Object getLabelDestination()
        {
            return this.labelDestination;
        }

        public java.lang.Object getValue()
        {
            return this.value;
        }

        public java.lang.String toString()
        {
            return label + "," + labelDestination + "=" + value;
        }
    }
#end

#macro(processListsInterface $field $oldStruts)
#set ($hash = "#")
#set ($listType = "java.lang.Object[]")
#set ($backingListName = $field.backingListName)
#set ($backingListMethod = $stringUtils.capitalize($backingListName))
#set ($valueListName = $field.valueListName)
#set ($valueListMethod = $stringUtils.capitalize($valueListName))
#set ($labelListName = $field.labelListName)
#set ($labelListMethod = $stringUtils.capitalize($labelListName))
    /**
     * The <code>$field.name</code> field can be selected from a list,
     * this method allows you to retrieve the current elements from that list.
     * <p/>
     * <i>Please note that the elements from that list are key value pairs, so you will
     * need to call <code>getLabel()</code> and <code>getValue()</code> to get the label and
     * value for this entry respectively.</i>
     *
     * @see ${hash}${field.getterName}()
     * @see ${hash}get${valueListMethod}()
     * @see ${hash}get${labelListMethod}()
     * @see ${hash}set${labelListMethod}(java.util.Collection,java.lang.String,java.lang.String)
     */
    public $listType get${backingListMethod}();
    public $listType get${backingListMethod}Destination();

    /**
     * Convenient method to quickly set the value and label backinglist for the
     * $field.name property. This method takes a collection of objects, as well as
     * the property names to query on these objects in order to find the corresponding
     * values and labels.
     * <p/>
     * Let's say you have a set of value objects with the following properties:
     * <ul>
     *  <li><code>id</code></li>
     *  <li><code>code</code></li>
     *  <li><code>name</code></li>
     *  <li><code>description</code></li>
     * </ul>
     * But you need to populate the $field.name backing list with the <code>id</code> properties as the values and the
     * <code>name</code> properties as the labels then you would make a call like this:
     * <code>set${backingListMethod}(valueObjects, "id", "name")</code>
     * <p/>
     * This method knows how to handle primitive property types as it simply delegates to
     * <code>org.apache.commons.beanutils.PropertyUtils.getProperty(Object, String)</code>.
     *
     * @param items The items from which to read the properties, if this argument is <code>null</code> this method
     *        will simply clear the existing values and labels
     * @param valueProperty the name of the property to query on each object to retrieve
     *        the corresponding value, cannot be <code>null</code>
     * @throws java.lang.IllegalArgumentException if the valueProperty or labelProperty is <code>null</code>
     * @throws java.lang.RuntimeException if one of the items in the collection is <code>null</code>, or
     *         if the caller does not have access one of the object's properties, if an exception was thrown while
     *         accessing a property or if the property does not exist on at least one of the items
     *
     * @see ${hash}${field.getterName}()
     * @see ${hash}get${valueListMethod}()
     * @see ${hash}get${labelListMethod}()
     * @see ${hash}get${labelListMethod}()
     */
    public void set${backingListMethod}(java.util.Collection items, String valueProperty, String labelProperty);
    public void set${backingListMethod}(java.util.Collection items, String valueProperty, String labelProperty, String labelHintProperty);
#if (!$oldStruts)
    public void set${backingListMethod}Internationalized(${servletPackage}.ViewContainer container, java.util.Collection items, java.lang.String valueProperty, java.lang.String labelProperty);
    public void set${backingListMethod}Internationalized(${servletPackage}.ViewContainer container, java.util.Collection items, java.lang.String valueProperty, java.lang.String labelProperty, String labelHintProperty);
#else
	public void set${backingListMethod}Internationalized(javax.servlet.http.HttpServletRequest request, java.util.Collection items, java.lang.String valueProperty, java.lang.String labelProperty);
    public void set${backingListMethod}Internationalized(javax.servlet.http.HttpServletRequest request, java.util.Collection items, java.lang.String valueProperty, java.lang.String labelProperty, String labelHintProperty);
#end
    public void set${backingListMethod}Destination(java.util.Collection items, java.lang.String valueProperty, java.lang.String labelProperty, java.lang.String labelDestinationProperty);

    /**
     * The <code>$field.name</code> field can be selected from a list,
     * this method allows you to retrieve the values from that list.
     *
     * @see ${hash}${field.getterName}()
     * @see ${hash}get${backingListMethod}()
     */
    public $listType get${valueListMethod}();

    /**
     * The <code>$field.name</code> field can be selected from a list,
     * this method allows you to set the values for that list.
     *
     * @see ${hash}${field.getterName}()
     * @see ${hash}get${backingListMethod}()
     */
    public void set${valueListMethod}($listType $valueListName);

    /**
     * The <code>$field.name</code> field can be selected from a list,
     * this method allows you to retrieve the labels from that list.
     *
     * @see ${hash}${field.getterName}()
     * @see ${hash}get${backingListMethod}()
     */
    public $listType get${labelListMethod}();
#if ($oldStruts)
    public $listType get${labelListMethod}Double();
#end
    public $listType get${labelListMethod}Hints();
    public $listType get${labelListMethod}Destination();

    /**
     * The <code>$field.name</code> field can be selected from a list,
     * this method allows you to set the labels for that list.
     *
     * @see ${hash}${field.getterName}()
     * @see ${hash}get${backingListMethod}()
     */
    public void set${labelListMethod}($listType $labelListName);
#if ($oldStruts)
    public void set${labelListMethod}Double($listType ${labelListName}Double);
#end
    public void set${labelListMethod}Hints($listType ${labelListName}Hints);
    public void set${labelListMethod}Destination($listType ${labelListName}Destination);
#end

#macro(processLists $field)
#set ($listType = "java.lang.Object[]")
#set ($backingListName = $field.backingListName)
#set ($backingListMethod = $stringUtils.capitalize($backingListName))
#set ($valueListName = $field.valueListName)
#set ($valueListMethod = $stringUtils.capitalize($valueListName))
#set ($labelListName = $field.labelListName)
#set ($labelListMethod = $stringUtils.capitalize($labelListName))
    public $listType get${backingListMethod}()
    {
        $listType values = this.${valueListName};
        $listType labels = this.${labelListName};
        $listType hints = this.${labelListName}Hints;        

        if (values == null || values.length == 0)
        {
            return values;
        }

        if (labels == null || labels.length == 0)
        {
            labels = values;
        }

        if (hints == null || hints.length == 0)
        {
            hints = labels;
        }

        final int length = java.lang.Math.min(labels.length, values.length);
        java.lang.Object[] backingList = new java.lang.Object[length];

        for (int i=0; i<length; i++)
        {
            backingList[i] = new LabelValue(labels[i], values[i], hints[i]);
        }

        return backingList;
    }

#if ($field.doubleSelect)
    public $listType get${backingListMethod}Double()
    {
        $listType values = this.${valueListName}Double;
        $listType labels = this.${labelListName}Double;
        $listType labelsDouble = this.${field.name}IndexListDouble;

        if (values == null || values.length == 0)
        {
            return values;
        }

        if (labels == null || labels.length == 0)
        {
            labels = values;
        }
        
        if (labelsDouble == null || labelsDouble.length == 0)
        {
            labelsDouble = values;
        }

        final int length = java.lang.Math.min(labels.length, values.length);
        java.lang.Object[] backingList = new java.lang.Object[length];

        for (int i=0; i<length; i++)
        {
            backingList[i] = new LabelValueDouble(labels[i], labelsDouble[i], values[i]);
        }

        return backingList;
    }
#end
    
    public $listType get${backingListMethod}Destination()
    {
        $listType values = this.${valueListName};
        $listType labels = this.${labelListName};
        $listType labelsDestination = this.${labelListName}Destination;        

        if (values == null || values.length == 0)
        {
            return values;
        }

        if (labels == null || labels.length == 0)
        {
            labels = values;
        }
        
        if (labelsDestination == null || labelsDestination.length == 0)
        {
            labelsDestination = values;
        }

        final int length = java.lang.Math.min(labels.length, values.length);
        java.lang.Object[] backingList = new java.lang.Object[length];

        for (int i=0; i<length; i++)
        {
            backingList[i] = new LabelValueDestination(labels[i], labelsDestination[i], values[i]);
        }

        return backingList;
    }

    public $listType get${valueListMethod}()
    {
        return this.$valueListName;
    }

    public void set${valueListMethod}($listType $valueListName)
    {
        this.$valueListName = $valueListName;
    }

    public $listType get${labelListMethod}()
    {
        return this.$labelListName;
    }

#if ($field.doubleSelect)
    public $listType get${labelListMethod}Double()
    {
        return this.${labelListName}Double;
    }
#end
    
    public $listType get${labelListMethod}Destination()
    {
        return this.${labelListName}Destination;
    }

    public $listType get${labelListMethod}Hints()
    {
        return this.${labelListName}Hints;
    }

    public void set${labelListMethod}($listType $labelListName)
    {
        this.$labelListName = $labelListName;
    }

#if ($field.doubleSelect)
    public void set${labelListMethod}Double($listType ${labelListName}Double)
    {
        this.${labelListName}Double = ${labelListName}Double;
    }
#end
    
    public void set${labelListMethod}Destination($listType ${labelListName}Destination)
    {
        final int length = ${labelListName}Destination != null ? ${labelListName}Destination.length : 0;
        java.lang.Object[] tempListaDestination = new java.lang.Object[length];

        for (int i=0; i<length; i++)
        {
            Object tempDestination = ${labelListName}Destination[i];
            if (tempDestination instanceof String) {
                String tempStringDestination = (String) tempDestination;
                if (tempStringDestination.length() > TAMANHO_MAXIMO_LABEL_DESTINO)
                {
                    tempStringDestination = tempStringDestination.substring(0,TAMANHO_MAXIMO_LABEL_DESTINO-1);
                    tempDestination = tempStringDestination;
                }
            }
            tempListaDestination[i] = tempDestination;
        }

        this.${labelListName}Destination = tempListaDestination;
    }

    public void set${labelListMethod}Hints($listType ${labelListName}Hints)
    {
        this.${labelListName}Hints = ${labelListName}Hints;
    }

    public void set${backingListMethod}Double(java.util.Collection items, java.lang.String valueProperty, java.lang.String labelProperty, java.lang.String labelDoubleProperty)
    {
        if (valueProperty == null || labelProperty == null || labelDoubleProperty == null)
        {
            throw new IllegalArgumentException("${formBeanClassName}.set${backingListMethod}Double requires non-null property arguments");
        }

        this.${valueListName} = null;
        this.${labelListName} = null;
        this.${labelListName}Double = null;        

        if (items != null)
        {
            this.${valueListName} = new java.lang.Object[items.size()];
            this.${labelListName} = new java.lang.Object[items.size()];
            this.${labelListName}Double = new java.lang.Object[items.size()];            

            try
            {
                int i = 0;
                for (java.util.Iterator iterator = items.iterator(); iterator.hasNext(); i++)
                {
                    final java.lang.Object item = iterator.next();

                    this.${valueListName}[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, valueProperty);
                    this.${labelListName}[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, labelProperty);
                    this.${labelListName}Double[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, labelDoubleProperty);                    
                }
            }
            catch (Exception ex)
            {
                throw new java.lang.RuntimeException("${formBeanClassName}.set${backingListMethod}Double encountered an exception", ex);
            }
        }
    }
    
    
    public void set${backingListMethod}Destination(java.util.Collection items, java.lang.String valueProperty, java.lang.String labelProperty, java.lang.String labelDestinationProperty)
    {
        if (valueProperty == null || labelProperty == null || labelDestinationProperty == null)
        {
            throw new IllegalArgumentException("${formBeanClassName}.set${backingListMethod}Destination requires non-null property arguments");
        }

        this.${valueListName} = null;
        this.${labelListName} = null;
        this.${labelListName}Destination = null;        

        if (items != null)
        {
            this.${valueListName} = new java.lang.Object[items.size()];
            this.${labelListName} = new java.lang.Object[items.size()];
            this.${labelListName}Destination = new java.lang.Object[items.size()];            

            try
            {
                int i = 0;
                for (java.util.Iterator iterator = items.iterator(); iterator.hasNext(); i++)
                {
                    final java.lang.Object item = iterator.next();

                    this.${valueListName}[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, valueProperty);
                    this.${labelListName}[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, labelProperty);

                    Object tempDestination = org.apache.commons.beanutils.PropertyUtils.getProperty(item, labelDestinationProperty);
                    if (tempDestination instanceof String) {
                        String tempStringDestination = (String) tempDestination;
                        if (tempStringDestination.length() > TAMANHO_MAXIMO_LABEL_DESTINO)
                        {
                            tempStringDestination = tempStringDestination.substring(0,TAMANHO_MAXIMO_LABEL_DESTINO-1);
                            tempDestination = tempStringDestination;
                        }
                    }
                    this.${labelListName}Destination[i] = tempDestination;
                }
            }
            catch (Exception ex)
            {
                throw new java.lang.RuntimeException("${formBeanClassName}.set${backingListMethod}Destination encountered an exception", ex);
            }
        }
    }

    public void set${backingListMethod}Internationalized(javax.servlet.http.HttpServletRequest request, java.util.Collection items, java.lang.String valueProperty, java.lang.String labelProperty){
	set${backingListMethod}(items, valueProperty, labelProperty);
	MessageResources messageResources = (MessageResources)request.getAttribute(Globals.MESSAGES_KEY);
	java.util.Locale locale = (java.util.Locale)request.getSession().getAttribute(Globals.LOCALE_KEY);
	for(int i = 0; i < this.${labelListName}.length; i++){
		Object label = this.${labelListName}[i];
		if(messageResources.isPresent(locale, this.${labelListName}[i].toString()))
        		this.${labelListName}[i] = messageResources.getMessage(locale, this.${labelListName}[i].toString());
	}
    }	    
    
    public void set${backingListMethod}Internationalized(javax.servlet.http.HttpServletRequest request, java.util.Collection items, java.lang.String valueProperty, java.lang.String labelProperty, java.lang.String labelHintProperty){
	set${backingListMethod}(items, valueProperty, labelProperty, labelHintProperty);
	MessageResources messageResources = (MessageResources)request.getAttribute(Globals.MESSAGES_KEY);
	java.util.Locale locale = (java.util.Locale)request.getSession().getAttribute(Globals.LOCALE_KEY);
	for(int i = 0; i < this.${labelListName}.length; i++){
		Object label = this.${labelListName}[i];
		if(messageResources.isPresent(locale, this.${labelListName}[i].toString()))
        		this.${labelListName}[i] = messageResources.getMessage(locale, this.${labelListName}[i].toString());
	}
	for(int i = 0; i < this.${labelListName}Hints.length; i++){
		Object label = this.${labelListName}Hints[i];
		if(messageResources.isPresent(locale, this.${labelListName}Hints[i].toString()))
        		this.${labelListName}Hints[i] = messageResources.getMessage(locale, this.${labelListName}Hints[i].toString());
	}
    }	    
    
    public void set${backingListMethod}(java.util.Collection items, java.lang.String valueProperty, java.lang.String labelProperty)
    {
        if (valueProperty == null || labelProperty == null)
        {
            throw new IllegalArgumentException("${formBeanClassName}.set${backingListMethod} requires non-null property arguments");
        }

        this.${valueListName} = null;
        this.${labelListName} = null;

        if (items != null)
        {
            this.${valueListName} = new java.lang.Object[items.size()];
            this.${labelListName} = new java.lang.Object[items.size()];

            try
            {
                int i = 0;
                for (java.util.Iterator iterator = items.iterator(); iterator.hasNext(); i++)
                {
                    final java.lang.Object item = iterator.next();

                    this.${valueListName}[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, valueProperty);
                    this.${labelListName}[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, labelProperty);
                }
            }
            catch (Exception ex)
            {
                throw new java.lang.RuntimeException("${formBeanClassName}.set${backingListMethod} encountered an exception", ex);
            }
        }
    }

    public void set${backingListMethod}(java.util.Collection items, java.lang.String valueProperty, java.lang.String labelProperty, java.lang.String labelHintProperty)
    {
        if (valueProperty == null || labelProperty == null || labelHintProperty == null)
        {
            throw new IllegalArgumentException("${formBeanClassName}.set${backingListMethod} requires non-null property arguments");
        }

        this.${valueListName} = null;
        this.${labelListName} = null;
        this.${labelListName}Hints = null;        

        if (items != null)
        {
            this.${valueListName} = new java.lang.Object[items.size()];
            this.${labelListName} = new java.lang.Object[items.size()];
            this.${labelListName}Hints = new java.lang.Object[items.size()];            

            try
            {
                int i = 0;
                for (java.util.Iterator iterator = items.iterator(); iterator.hasNext(); i++)
                {
                    final java.lang.Object item = iterator.next();

                    this.${valueListName}[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, valueProperty);
                    this.${labelListName}[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, labelProperty);
                    this.${labelListName}Hints[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, labelHintProperty);                    
                }
            }
            catch (Exception ex)
            {
                throw new java.lang.RuntimeException("${formBeanClassName}.set${backingListMethod} encountered an exception", ex);
            }
        }
    }
#end

#macro(processLists2 $field)
#set ($listType = "java.lang.Object[]")
#set ($backingListName = $field.backingListName)
#set ($backingListMethod = $stringUtils.capitalize($backingListName))
#set ($valueListName = $field.valueListName)
#set ($valueListMethod = $stringUtils.capitalize($valueListName))
#set ($labelListName = $field.labelListName)
#set ($labelListMethod = $stringUtils.capitalize($labelListName))
    public $listType get${backingListMethod}()
    {
        $listType values = this.${valueListName};
        $listType labels = this.${labelListName};
        $listType hints = this.${labelListName}Hints;        

        if (values == null || values.length == 0)
        {
            return values;
        }

        if (labels == null || labels.length == 0)
        {
            labels = values;
        }

        if (hints == null || hints.length == 0)
        {
            hints = labels;
        }

        final int length = java.lang.Math.min(labels.length, values.length);
        java.lang.Object[] backingList = new java.lang.Object[length];

        for (int i=0; i<length; i++)
        {
            backingList[i] = new LabelValue(labels[i], values[i], hints[i]);
        }

        return backingList;
    }
    
    public $listType get${backingListMethod}Destination()
    {
        $listType values = this.${valueListName};
        $listType labels = this.${labelListName};
        $listType labelsDestination = this.${labelListName}Destination;        

        if (values == null || values.length == 0)
        {
            return values;
        }

        if (labels == null || labels.length == 0)
        {
            labels = values;
        }
        
        if (labelsDestination == null || labelsDestination.length == 0)
        {
            labelsDestination = values;
        }

        final int length = java.lang.Math.min(labels.length, values.length);
        java.lang.Object[] backingList = new java.lang.Object[length];

        for (int i=0; i<length; i++)
        {
            backingList[i] = new LabelValueDestination(labels[i], labelsDestination[i], values[i]);
        }

        return backingList;
    }

    public $listType get${valueListMethod}()
    {
        return this.$valueListName;
    }

    public void set${valueListMethod}($listType $valueListName)
    {
        this.$valueListName = $valueListName;
    }

    public $listType get${labelListMethod}()
    {
        return this.$labelListName;
    }
    
    public $listType get${labelListMethod}Destination()
    {
        return this.${labelListName}Destination;
    }

    public $listType get${labelListMethod}Hints()
    {
        return this.${labelListName}Hints;
    }

    public void set${labelListMethod}($listType $labelListName)
    {
        this.$labelListName = $labelListName;
    }
    
    public void set${labelListMethod}Destination($listType ${labelListName}Destination)
    {
        final int length = ${labelListName}Destination != null ? ${labelListName}Destination.length : 0;
        java.lang.Object[] tempListaDestination = new java.lang.Object[length];

        for (int i=0; i<length; i++)
        {
            Object tempDestination = ${labelListName}Destination[i];
            if (tempDestination instanceof String) {
                String tempStringDestination = (String) tempDestination;
                if (tempStringDestination.length() > TAMANHO_MAXIMO_LABEL_DESTINO)
                {
                    tempStringDestination = tempStringDestination.substring(0,TAMANHO_MAXIMO_LABEL_DESTINO-1);
                    tempDestination = tempStringDestination;
                }
            }
            tempListaDestination[i] = tempDestination;
        }

        this.${labelListName}Destination = tempListaDestination;
    }

    public void set${labelListMethod}Hints($listType ${labelListName}Hints)
    {
        this.${labelListName}Hints = ${labelListName}Hints;
    }
    
    public void set${backingListMethod}Destination(java.util.Collection items, java.lang.String valueProperty, java.lang.String labelProperty, java.lang.String labelDestinationProperty)
    {
        if (valueProperty == null || labelProperty == null || labelDestinationProperty == null)
        {
            throw new IllegalArgumentException("${formBeanClassName}.set${backingListMethod}Destination requires non-null property arguments");
        }

        this.${valueListName} = null;
        this.${labelListName} = null;
        this.${labelListName}Destination = null;        

        if (items != null)
        {
            this.${valueListName} = new java.lang.Object[items.size()];
            this.${labelListName} = new java.lang.Object[items.size()];
            this.${labelListName}Destination = new java.lang.Object[items.size()];            

            try
            {
                int i = 0;
                for (java.util.Iterator iterator = items.iterator(); iterator.hasNext(); i++)
                {
                    final java.lang.Object item = iterator.next();

                    this.${valueListName}[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, valueProperty);
                    this.${labelListName}[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, labelProperty);

                    Object tempDestination = org.apache.commons.beanutils.PropertyUtils.getProperty(item, labelDestinationProperty);
                    if (tempDestination instanceof String) {
                        String tempStringDestination = (String) tempDestination;
                        if (tempStringDestination.length() > TAMANHO_MAXIMO_LABEL_DESTINO)
                        {
                            tempStringDestination = tempStringDestination.substring(0,TAMANHO_MAXIMO_LABEL_DESTINO-1);
                            tempDestination = tempStringDestination;
                        }
                    }
                    this.${labelListName}Destination[i] = tempDestination;
                }
            }
            catch (Exception ex)
            {
                throw new java.lang.RuntimeException("${formBeanClassName}.set${backingListMethod}Destination encountered an exception", ex);
            }
        }
    }

    public void set${backingListMethod}Internationalized(${servletPackage}.ViewContainer container, java.util.Collection items, java.lang.String valueProperty, java.lang.String labelProperty) {
        set${backingListMethod}(items, valueProperty, labelProperty);

#if(${field.widgetType}=="select" || ${field.radioButton})
        java.util.Map ${field.name}Combo = new java.util.LinkedHashMap();
#end
        for(int i = 0; i < this.${labelListName}.length; i++) {
            String messageText = container.getMessageText(this.${labelListName}[i].toString());
            if(messageText != null)
                this.${labelListName}[i] = messageText;
#if(${field.widgetType}=="select" || ${field.radioButton})
            ${field.name}Combo.put(this.${valueListName}[i], messageText);
#end
        }
#if(${field.widgetType}=="select" || ${field.radioButton})
        ${field.setterName}ComboList(${field.name}Combo);
#end
    }

    public void set${backingListMethod}Internationalized(${servletPackage}.ViewContainer container, java.util.Collection items, java.lang.String valueProperty, java.lang.String labelProperty, java.lang.String labelHintProperty) {
        set${backingListMethod}(items, valueProperty, labelProperty, labelHintProperty);

#if(${field.widgetType}=="select" || ${field.radioButton})
        java.util.Map ${field.name}Combo = new java.util.LinkedHashMap();
#end
        for(int i = 0; i < this.${labelListName}.length; i++) {
            String messageText = container.getMessageText(this.${labelListName}[i].toString());
            if(messageText != null)
                this.${labelListName}[i] = messageText;
#if(${field.widgetType}=="select" || ${field.radioButton})
            ${field.name}Combo.put(this.${valueListName}[i], messageText);
#end
        }
#if(${field.widgetType}=="select" || ${field.radioButton})
        ${field.setterName}ComboList(${field.name}Combo);
#end

        for(int i = 0; i < this.${labelListName}Hints.length; i++) {
            Object label = this.${labelListName}Hints[i];
            String messageText = container.getMessageText(this.${labelListName}Hints[i].toString());
            if(messageText != null)
                this.${labelListName}Hints[i] = messageText;
        }
    }

    public void set${backingListMethod}(java.util.Collection items, java.lang.String valueProperty, java.lang.String labelProperty)
    {
        if (valueProperty == null || labelProperty == null)
        {
            throw new IllegalArgumentException("${formBeanClassName}.set${backingListMethod} requires non-null property arguments");
        }

        this.${valueListName} = null;
        this.${labelListName} = null;

        if (items != null)
        {
            this.${valueListName} = new java.lang.Object[items.size()];
            this.${labelListName} = new java.lang.Object[items.size()];

            try
            {
                int i = 0;
                for (java.util.Iterator iterator = items.iterator(); iterator.hasNext(); i++)
                {
                    final java.lang.Object item = iterator.next();

                    this.${valueListName}[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, valueProperty);
                    this.${labelListName}[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, labelProperty);
                }
            }
            catch (Exception ex)
            {
                throw new java.lang.RuntimeException("${formBeanClassName}.set${backingListMethod} encountered an exception", ex);
            }
        }
    }

    public void set${backingListMethod}(java.util.Collection items, java.lang.String valueProperty, java.lang.String labelProperty, java.lang.String labelHintProperty)
    {
        if (valueProperty == null || labelProperty == null || labelHintProperty == null)
        {
            throw new IllegalArgumentException("${formBeanClassName}.set${backingListMethod} requires non-null property arguments");
        }

        this.${valueListName} = null;
        this.${labelListName} = null;
        this.${labelListName}Hints = null;        

        if (items != null)
        {
            this.${valueListName} = new java.lang.Object[items.size()];
            this.${labelListName} = new java.lang.Object[items.size()];
            this.${labelListName}Hints = new java.lang.Object[items.size()];            

            try
            {
                int i = 0;
                for (java.util.Iterator iterator = items.iterator(); iterator.hasNext(); i++)
                {
                    final java.lang.Object item = iterator.next();

                    this.${valueListName}[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, valueProperty);
                    this.${labelListName}[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, labelProperty);
                    this.${labelListName}Hints[i] = org.apache.commons.beanutils.PropertyUtils.getProperty(item, labelHintProperty);                    
                }
            }
            catch (Exception ex)
            {
                throw new java.lang.RuntimeException("${formBeanClassName}.set${backingListMethod} encountered an exception", ex);
            }
        }
    }

#end

