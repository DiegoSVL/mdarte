// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: LoginController.java.vsl in andromda-bpm4struts-cartridge-coppetec.
//
#set ($generatedFile = "LoginController.java")
#if($stringUtils.isNotEmpty($controleAcessoDir))
package $controleAcessoDir;
#set ($generatedFile = "${stringUtils.replace($controleAcessoDir,'.','/')}/${generatedFile}")
#end

#set ($sharp = "#")

import javax.security.auth.Subject;
import javax.security.auth.callback.CallbackHandler;
import javax.security.auth.login.LoginContext;
import javax.security.auth.login.LoginException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionMapping;
#set($packageUtil = "${customTypesPackage}.${stringUtils.replace($utilDir,'/','.')}")
import ${packageUtil}.Constantes;
import ${packageUtil}.CriptoUtils;
import org.apache.commons.lang.StringUtils;
import java.util.HashMap;
import java.util.Collection;
#if($oAuthServer == "true")
import net.oauth.OAuth;
#end

import ${customTypesPackage}.ServiceLocator;
import accessControl.ControleAcesso;
import accessControl.LoginCallbackHandler;
import accessControl.PrincipalImpl;
import accessControl.Servico;
import accessControl.Operador;
import accessControl.ServicosSingleton;
import accessControl.exception.ControleAcessoException;

public abstract class LoginController implements java.io.Serializable
{
	private static final long serialVersionUID = 1L;
	public static final String ATTR_LOGIN = "Usr", ATTR_CAPTCHA = "captcha", ATTR_SENHA = "Pwd";

    public final boolean verificarLogin(ActionMapping mapping, VerificarLoginForm form, HttpServletRequest request, HttpServletResponse response, HttpServlet servlet) throws Exception
    {
    	EntrarLoginValidarFormImpl formLogin = null;
    	String login = null;
    	String senha = null;
    	String captcha = null;
    	try{
    		captcha = request.getParameter(ATTR_CAPTCHA);    	
    		formLogin = (EntrarLoginValidarFormImpl) form;
    		login = formLogin.getLogin();
    		senha = formLogin.getSenha();
    	}catch(Exception e){
    		senha = request.getParameter(ATTR_SENHA);
    		login = request.getParameter(ATTR_LOGIN);   		
    	}
    	LoginContext loginCtx = null;
    	ControleAcesso controleAcesso = new ControleAcessoImpl();
		try{
			if (request.getSession().getAttribute("PRECISA_CAPTCHA") != null) {
				CaptchaUtil captchaUtil = new CaptchaUtil();

				if (captchaUtil.isNotHuman(request, captcha)) {
					saveErrorMessage(request, "erro.captcha.invalido");
					throw new ControleAcessoException("erro.captcha.invalido");
				}
				
				request.getSession().setAttribute("PRECISA_CAPTCHA", null);
			}
			
			if (controleAcesso.usuarioBloqueado(login)) {
				saveErrorMessage(request, "usuario.bloqueado");
				return false;
			}
			CallbackHandler handler = new LoginCallbackHandler(login, senha);
			loginCtx = new LoginContext("$securityRealm", handler);
			loginCtx.login();
			Subject subject = loginCtx.getSubject();
			accessControl.SecurityHolder.setSubject(subject);
			PrincipalImpl principal = ControleAcesso.getCallerPrincipal(subject);
			principal.setNomeProjeto("$securityRealm");			
			request.getSession().setAttribute(Constantes.USER_SESSION, subject);
			String nome = principal.getOperador().getNomeIdentificadorMenu();
			request.getSession().setAttribute("nomeIdentificadorMenu", nome);
			posLogin(principal.getOperador(), request);
			
			//deveria estar no posLogin
			if (!login.equals("guest"))
				ServiceLocator.instance().getUtilitarioHandlerBI().invalidateMembroParticipanteCA(login);
			
			#if($enableCaptcha=="true")
			String captchaExpected =(String)request.getSession().getAttribute(com.google.code.kaptcha.Constants.KAPTCHA_SESSION_KEY);
			String captchaReceived = form.getKaptcha();
			if(captchaReceived!= null && captchaReceived.equals(captchaExpected)){
			request.getSession().removeAttribute(com.google.code.kaptcha.Constants.KAPTCHA_SESSION_KEY);
				return true;
			}else{
				saveErrorMessage(request, "captcha.incorreto");
				return false;
			}
#else
			return true;
#end
		}catch (LoginException le){
			request.getSession().setAttribute("PRECISA_CAPTCHA", true);
			
			if(le.getMessage().equals("Password Incorrect/Password Required")){
				saveErrorMessage(request, "senha.incorreta");
#if($stringUtils.isNotEmpty($maxTentativasLogin))
				HashMap<String, Integer> mt = getMapaTentativas(request);
				if (mt.get(login) == null) {
					mt.put(login, 1);
				} else {
					int tentativas = mt.get(login) + 1;
					if (tentativas > $maxTentativasLogin) {
						controleAcesso.bloqueiaUsuario(login);
						saveErrorMessage(request, "usuario.bloqueado");
					}
					mt.put(login, tentativas);
				}
#end
			}else if(le.getMessage().equals("No matching username found in Principals")){
				saveErrorMessage(request, "usuario.incorreto");
			}else{
				saveErrorMessage(request, le.getMessage());
			}
			return false;
		}
    }

    private HashMap<String, Integer> getMapaTentativas(HttpServletRequest request) {
    	HttpSession session = request.getSession();
		if(session.getAttribute(Constantes.TENTATIVAS_LOGIN) == null) {
			session.setAttribute(Constantes.TENTATIVAS_LOGIN, new HashMap<String, Integer>());
		}
		return (HashMap<String, Integer>)session.getAttribute(Constantes.TENTATIVAS_LOGIN);
	}

    public final boolean sessaoValida(ActionMapping mapping,  HttpServletRequest request, HttpServletResponse response, HttpServlet servlet) throws Exception
    {
		HttpSession session = request.getSession();
		if(session.getAttribute(Constantes.USER_SESSION) == null){
#if($oAuthServer == "true")
			String oAuthToken = request.getParameter(OAuth.OAUTH_TOKEN);
			if(oAuthToken!=null){
				Subject subject = OAuthImpl.getInstance().getSubject(oAuthToken);
				if(subject!=null){
					session.setAttribute(Constantes.USER_SESSION, subject);
					return true;
				}
			}
#end
			return false;
		}else{
			return true;
		}
    }


    public final boolean possuiLoginSenha(ActionMapping mapping, HttpServletRequest request, HttpServletResponse response, HttpServlet servlet) throws Exception
    {
		String login = (String) request.getParameter(ATTR_LOGIN);
		String senha = (String) request.getParameter(ATTR_SENHA);
		if(validaStr(login) && validaStr(senha))
			return true;
		else
			return false;
    }
    
	private boolean validaStr(String str){
		if (str != null )
			return true;
		else
			return false;
	}
	

    public final boolean precisaTrocarSenha(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response, HttpServlet servlet) throws Exception
    {
    	try{    	
	    	Subject subject = (Subject)request.getSession().getAttribute(Constantes.USER_SESSION);
	    	boolean precisaTrocarSenha = false;
	    	ControleAcesso controleAcesso = new ControleAcessoImpl();
	    	PrincipalImpl principalImpl = controleAcesso.getCallerPrincipal(subject);
	    	if(controleAcesso.precisaTrocarSenha(principalImpl.getOperador())){
	    		EntrarLoginValidarFormImpl entrarLoginValidarFormImpl = (EntrarLoginValidarFormImpl) form;
	            LoginFormImpl formImpl = (LoginFormImpl)form;
	            formImpl.setUsuario(entrarLoginValidarFormImpl.getLogin());
	            precisaTrocarSenha = true;
	    	}
	    	if(precisaTrocarSenha){
	    		request.getSession().setAttribute(Constantes.TROCA_SENHA_OBRIGATORIA, "true");
	    	}
	    	return precisaTrocarSenha;
	    }catch(ControleAcessoException e ){
			saveErrorMessage(request, e.getMessage());
			return false;    	
	    }	
    }

 
    public final boolean trocaEfetuadaComSucesso(ActionMapping mapping, TrocaEfetuadaComSucessoForm form, HttpServletRequest request, HttpServletResponse response, HttpServlet servlet) throws Exception
    {
    	try{
    		boolean trocaEfetuadaComSucesso = false;
	    	Subject subject = (Subject)request.getSession().getAttribute(Constantes.USER_SESSION);
	    	ControleAcesso controleAcesso = new ControleAcessoImpl();
	    	PrincipalImpl principalImpl = controleAcesso.getCallerPrincipal(subject);
	    	TrocaDeSenhaObrigatoriaProcessarFormImpl formImpl = (TrocaDeSenhaObrigatoriaProcessarFormImpl)form;
	    	String senhaAntiga = CriptoUtils.byteArrayToHexString(CriptoUtils.digest(formImpl.getSenha().getBytes()));
	    	String senhaNova = CriptoUtils.byteArrayToHexString(CriptoUtils.digest(formImpl.getNovaSenha().getBytes()));
	    	String confirmacao = CriptoUtils.byteArrayToHexString(CriptoUtils.digest(formImpl.getConfirmacao().getBytes()));
	    	if(!senhaNova.equals(confirmacao)){
	    		saveErrorMessage(request, "login.troca.de.senha.obrigatoria.senha.nova.diferente.confirmacao");
	    		return false;
	    	}
	    	if(senhaAntiga.equals(senhaNova)){
	    		saveErrorMessage(request, "login.troca.de.senha.obrigatoria.senha.antiga.igual.senha.nova");
	    		return false;
	    	}
	    	if(controleAcesso.senhaFraca(formImpl.getNovaSenha())){
	    		saveErrorMessage(request, "login.troca.de.senha.obrigatoria.senha.fraca");
	    		return false;
	    	}
	    	trocaEfetuadaComSucesso =  controleAcesso.trocaSenha(principalImpl.getOperador(), senhaAntiga, senhaNova);
	    	if(!trocaEfetuadaComSucesso) {
	    		saveErrorMessage(request, "login.troca.de.senha.obrigatoria.processar.error");
	    	}else{	    		    	
	    		request.getSession().removeAttribute(Constantes.TROCA_SENHA_OBRIGATORIA);	
	    		saveSuccessMessage(request, "login.troca.de.senha.obrigatoria.processar.success");    	
	    	}
	    	return trocaEfetuadaComSucesso;
    	}catch(ControleAcessoException e ){
    		saveErrorMessage(request, e.getMessage());
			return false;
    	}
    }
    
	public boolean verificarPermissao(ActionMapping mapping, HttpServletRequest request, HttpServletResponse response, HttpServlet servlet) throws Exception {
		##java.util.HashMap mapServicos = (java.util.HashMap) request.getSession().getServletContext().getAttribute(Constantes.SERVICOS);
		##Subject subject = (Subject)request.getSession().getAttribute(Constantes.USER_SESSION);		
		##String nomeServico = StringUtils.remove(request.getServletPath(), ".do");
		##Servico servico = new Servico(nomeServico);
		##boolean possuiPermissao = accessControl.ControleAcesso.verificaPermissao(subject, mapServicos, servico, true);
		##if(possuiPermissao){		
		##	return true;
		##}else{
		##	saveErrorMessage(request, "acesso.negado");				
		##	return false;
		##}
		java.util.HashMap<String, HashMap<String, Collection<accessControl.Perfil>>> servicos = ServicosSingleton.instance().getServicos();
		HashMap<String, Collection<accessControl.Perfil>> mapServicos; 
		if(servicos == null){
			mapServicos = new HashMap<String, Collection<accessControl.Perfil>>();
		}else{
			mapServicos = servicos.get("${projectId}");
		}
		Subject subject = (Subject)request.getSession().getAttribute(Constantes.USER_SESSION);		
		String nomeServico = StringUtils.remove(request.getServletPath(), ".do");
		Servico servico = new Servico(nomeServico);
		boolean possuiPermissao = accessControl.ControleAcesso.verificaPermissao(subject, mapServicos, servico, true);
		if(possuiPermissao){		
			return true;
		}else{
			saveErrorMessage(request, "acesso.negado");				
			return false;
		}		
	}   
   
   /**
     * Stores a warning message in the session, if any other warning messages exist, this one
     * is simply added. This message will be removed from the session after the first time
     * it has been accessed (a feature supported by Struts since version 1.2.4).
     *
     * @param session the session to which the messages will be saved.
     * @param message the message key to lookup the actual message to display
     * @param arguments any arguments used within the message
     */
    protected final void saveWarningMessage(javax.servlet.http.HttpServletRequest request, java.lang.String message, java.lang.String[] arguments)
    {
        final javax.servlet.http.HttpSession session = request.getSession();

        // we explicitely store and retrieve the messages from the session, as opposed to using
        // Action.saveMessages because this constroller does not have access to the current Action instance
        org.apache.struts.action.ActionMessages messages = (org.apache.struts.action.ActionMessages)session.getAttribute(org.apache.struts.Globals.MESSAGE_KEY);
        if (messages == null)
        {
            messages = new org.apache.struts.action.ActionMessages();
            session.setAttribute(org.apache.struts.Globals.MESSAGE_KEY, messages);
        }
        messages.add("org.andromda.bpm4struts.warningmessages", new org.apache.struts.action.ActionMessage(message, arguments));
    }

    /**
     * Stores a warning message in the session, if any other warning messages exist, this one
     * is simply added. This message will be removed from the session after the first time
     * it has been accessed (a feature supported by Struts since version 1.2.4).
     *
     * @param session the session to which the messages will be saved.
     * @param message the message key to lookup the actual message to display
     * @see ${sharp}saveWarningMessage(javax.servlet.http.HttpServletRequest, java.lang.String, java.lang.String[])
     */
    protected final void saveWarningMessage(javax.servlet.http.HttpServletRequest request, java.lang.String message)
    {
        this.saveWarningMessage(request, message, null);
    }

    /**
     * Stores a success message in the session, if any other success messages exist, this one
     * is simply added. This message will be removed from the session after the first time
     * it has been accessed (a feature supported by Struts since version 1.2.4).
     *
     * @param request the request from which the session will be taken into which the messages will be saved.
     * @param message the message key to lookup the actual message to display
     */
    protected final void saveSuccessMessage(javax.servlet.http.HttpServletRequest request, java.lang.String message, java.lang.String[] arguments)
    {
        final javax.servlet.http.HttpSession session = request.getSession();

        // we explicitely store and retrieve the messages from the session, as opposed to using
        // Action.saveMessages because this constroller does not have access to the current Action instance
        org.apache.struts.action.ActionMessages messages = (org.apache.struts.action.ActionMessages)session.getAttribute(org.apache.struts.Globals.MESSAGE_KEY);
        if (messages == null)
        {
            messages = new org.apache.struts.action.ActionMessages();
            session.setAttribute(org.apache.struts.Globals.MESSAGE_KEY, messages);
        }
        messages.add("org.andromda.bpm4struts.successmessages", new org.apache.struts.action.ActionMessage(message, arguments));
        
        
        
        
   
    }

    /**
     * Stores a success message in the session, if any other success messages exist, this one
     * is simply added. This message will be removed from the session after the first time
     * it has been accessed (a feature supported by Struts since version 1.2.4).
     *
     * @param request the request from which the session will be taken into which the messages will be saved.
     * @param message the message key to lookup the actual message to display
     * @see ${sharp}saveSuccessMessage(javax.servlet.http.HttpServletRequest, java.lang.String, java.lang.String[])
     */
    protected final void saveSuccessMessage(javax.servlet.http.HttpServletRequest request, java.lang.String message)
    {
        this.saveSuccessMessage(request, message, null);
    }

    /**
     * Stores an error message in the session, if any other error messages exist, this one
     * is simply added. This message will be removed from the session after the first time
     * it has been accessed (a feature supported by Struts since version 1.2.4).
     *
     * @param request the request from which the session will be taken into which the messages will be saved.
     * @param message the message key to lookup the actual message to display
     * @see ${sharp}saveSuccessMessage(javax.servlet.http.HttpServletRequest, java.lang.String, java.lang.String[])
     */
    protected final void saveErrorMessage(javax.servlet.http.HttpServletRequest request, java.lang.String message, java.lang.String[] arguments)
    {
        final javax.servlet.http.HttpSession session = request.getSession();

        // we explicitely store and retrieve the messages from the session, as opposed to using
        // Action.saveMessages because this constroller does not have access to the current Action instance
        org.apache.struts.action.ActionMessages messages = (org.apache.struts.action.ActionMessages)session.getAttribute(org.apache.struts.Globals.MESSAGE_KEY);
        if (messages == null)
        {
            messages = new org.apache.struts.action.ActionMessages();
            session.setAttribute(org.apache.struts.Globals.MESSAGE_KEY, messages);
        }
        messages.add("org.andromda.bpm4struts.errormessages", new org.apache.struts.action.ActionMessage(message, arguments));
    }

    /**
     * Stores an error message in the session, if any other error messages exist, this one
     * is simply added. This message will be removed from the session after the first time
     * it has been accessed (a feature supported by Struts since version 1.2.4).
     *
     * @param request the request from which the session will be taken into which the messages will be saved.
     * @param message the message key to lookup the actual message to display
     * @see ${sharp}saveSuccessMessage(javax.servlet.http.HttpServletRequest, java.lang.String, java.lang.String[])
     */
    protected final void saveErrorMessage(javax.servlet.http.HttpServletRequest request, java.lang.String message)
    {
        this.saveErrorMessage(request, message, null);
    }
    
    public void posLogin(Operador operador, HttpServletRequest request) throws Exception
    {
        handlePosLogin(operador,request);
    }

    public abstract void handlePosLogin(Operador operador, HttpServletRequest request) throws Exception;
    
}
