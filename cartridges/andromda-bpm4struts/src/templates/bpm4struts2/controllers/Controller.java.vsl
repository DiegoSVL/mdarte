#set ($generatedFile = "${controller.fullPath}.java")
#set ($operations = $controller.operations)
##
##  CONSTANTS
##
#set ($sessionObjects = $controller.sessionObjects)
#set($gerar = true)
#if(${controller.useCase.useCaseOldStruts})
#set($gerar = false)
#end
##
##  START TEMPLATE
##
#if($gerar)
// license-header java merge-point
package $controller.packageName;
#set ($securityEnabled = $stringUtils.isNotBlank($securityRealm))

#set ($packageUtil = "${customTypesPackage}.${stringUtils.replace($utilDir,'/','.')}")
import ${packageUtil}.Constantes;
import ${servletPackage}.ViewContainer;
import ${servletPackage}.ControllerAbstract;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import java.util.Collection;

/**
$controller.getDocumentation(" * ")
 */
public abstract class ${controller.name} extends ControllerAbstract
{

#foreach ($operation in $operations)
#set ($parameters = $operation.arguments)
#set ($visibility = $operation.visibility)
#set ($returnType = $operation.returnType.fullyQualifiedName)
#if (!$returnType)
#set ($returnType = "void")
#end
	/**
$operation.getDocumentation("     * ")
#if ($operation.callingBackEnd)
	 *
	 * This operation delegates to
	 * <code>${operation.backEndServiceOperation.owner.fullyQualifiedName}.${operation.backEndServiceOperation.name}</code>
#end
	 */
#if ($operation.callingBackEnd) ## remocao dos parametros actionmapping, request e response
	$visibility $returnType ${operation.name}($operation.interfaceType form) throws java.lang.Exception
	{
		${operation.backEndServiceOperation.owner.accessorImplementation}.${operation.backEndServiceOperation.name}(
#set ($comma = "")
#foreach ($argument in $operation.backEndServiceOperation.arguments)
		${comma}form.${argument.getterName}()
#set ($comma = ", ")
#end
		);
	}
#else
	$visibility abstract $returnType ${operation.name}($operation.interfaceType form,  ViewContainer container) throws java.lang.Exception;
#end

#set ($returnType = false)
#end
#foreach ($sessionObject in $sessionObjects)
#set ($accessorSuffix = $stringUtils.capitalize($sessionObject.name))
    /**
     * Returns the current $sessionObject.name from the session found in the argument request.
     * <p/>
     * In case an object was found in the session but it was not of the correct type, this method
     * will return <code>null</code>.
     * <p/>
     * If there is no session, it will be created; if the session would not contain a session-object
     * the object will be instantiated and subsequently stored in the session.
     */
	protected final $sessionObject.fullyQualifiedName get${accessorSuffix}(ViewContainer container)
	{
		$sessionObject.fullyQualifiedName object = null;
		Object attribute = container.getFromSession(${sessionObject.fullyQualifiedName}.SESSION_KEY);

#set($keep = "false")
#if(($sessionObject.findTaggedValue("$keepSO") && $sessionObject.findTaggedValue("$keepSO")))
#set($keep = "true")
#end
#set($counterSO = false)
#if($sessionObject.findTaggedValue("$sessionObjectCounter") && ($sessionObject.findTaggedValue("$sessionObjectCounter") && !$sessionObject.findTaggedValue("$sessionObjectCounter").equals("")))
#set($counterSO = true)
#end
		if (attribute instanceof $sessionObject.fullyQualifiedName)
		{
			object = ($sessionObject.fullyQualifiedName)attribute;
#if($keep.equals("false") && $counterSO)
			${servletPackage}.SessionObjectUtilStruts2.resetSessionObjetCounter(container, object.SESSION_KEY, object.getIterations());
#end
		}
		else if (attribute == null)
		{
			object = new $sessionObject.fullyQualifiedName ();
			set${accessorSuffix}(object, container);
		}

		return object;
	}

    /**
     * Set the argument $sessionObject.name object in the session corresponding with the argument request.
     * Any existing object will be overwritten.
     *
     * @param createSession denotes whether or not the session should be created automatically in case it
     * would not yet exist
     */
	protected final void set${accessorSuffix}($sessionObject.fullyQualifiedName object, ViewContainer container)
	{
		if (container != null)
		{
#set($keep = "false")
#if(($sessionObject.findTaggedValue("$keepSO") && $sessionObject.findTaggedValue("$keepSO")))
#set($keep = "true")
#end
#set($counterSO = false)
#if($sessionObject.findTaggedValue("$sessionObjectCounter") && ($sessionObject.findTaggedValue("$sessionObjectCounter") && !$sessionObject.findTaggedValue("$sessionObjectCounter").equals("")))
#set($counterSO = true)
#end
#if($keep.equals("true") || !$counterSO)
			${servletPackage}.SessionObjectUtilStruts2.setSessionObject(container, object, ${sessionObject.fullyQualifiedName}.SESSION_KEY, "$controller.useCase.name", $keep);
 #elseif($keep.equals("false") && $counterSO)
			${servletPackage}.SessionObjectUtilStruts2.setSessionObject(container, object, ${sessionObject.fullyQualifiedName}.SESSION_KEY, $sessionObject.findTaggedValue("$sessionObjectCounter"));
#end
		}
	}

    /**
     * Removes the argument $sessionObject.name object from the session corresponding with the argument request.
     * In any of the following cases this method will do nothing:
     * <ul>
     *   <li>No session corresponds to the argument request</li>
     *   <li>No $sessionObject.name object could be found in the request</li>
     *   <li>The object is not of the correct type</li>
     * </ul>
     */
	protected final void remove${accessorSuffix}(ViewContainer container)
	{
		Object attribute = container.getFromSession(${sessionObject.fullyQualifiedName}.SESSION_KEY);
		if (attribute instanceof $sessionObject.fullyQualifiedName)
		{
			${servletPackage}.SessionObjectUtilStruts2.removeSessionObject(container, ${sessionObject.fullyQualifiedName}.SESSION_KEY);
		}
	}

#end
##Codigo que gera automaticamente os métodos para fazer o autocomplete dos campos
#set($actions = $controller.getUseCase().getActions())
#foreach($action in $actions)
#foreach($parametro in $action.getActionParameters())
#if($parametro.autocomplete)
#set($pageName = $parametro.name) 
#set($palavras = $parametro.getJsp().getName().split(" "))
#foreach($palavra in $palavras)
#set($aux=$palavra.subSequence(0,1).toUpperCase().concat("$palavra.substring(1)"))
#set($pageName = $pageName.concat("$aux"))
#end
#set($package = ${controller.getPackagePath().replace("/", ".")})

	protected abstract String[] ${pageName}AutoComplete(String query, ViewContainer container) throws Exception;
	
	public void ${pageName}AutoComplete(ViewContainer container) throws Exception
	{	
		String [] result;
    	
    	String query = container.getParameter("query");
    	
    	if(query == null)
    		query = "";
  
		result =  this.${pageName}AutoComplete(query, container);

		JSONArray jsonArray = new JSONArray();
		
		if(result != null)
		{
			for (String string : result)
			{
				jsonArray.add(string);
		    }
		}
    	
		container.setContentType("application/json;charset=UTF-8");
    	container.getWriter().write(jsonArray.toString());
    	
	}
#elseif($parametro.tableType.equals("footable"))
#set($tableName = $parametro.name.subSequence(0,1).toUpperCase().concat($parametro.name.substring(1)) )
#set($actionName = "")
#set($palavras = ${parametro.getJsp().getName().split(" ")})
#foreach($palavra in $palavras)
#set($aux=$palavra.subSequence(0,1).toUpperCase().concat($palavra.substring(1)))
#set($actionName = $actionName.concat("$aux"))
#end
#set($actionName=$actionName.concat($tableName))
	protected abstract Integer get${actionName}TableLength() throws Exception;
	
	protected void get${actionName}TableLength(ViewContainer container) throws Exception {
		JSONArray array = new JSONArray();
		
		Integer length = this.get${actionName}TableLength();
		
		if(length == null)
			length = 0;
		
		array.add(length);
		
		container.setContentType("application/json;charset=UTF-8");
        
        container.getWriter().write(array.toString());
	}

	protected abstract Collection load${actionName}Table(Integer paginacao,Integer linhas) throws java.lang.Exception;
	
	protected void load${actionName}Table(ViewContainer container) throws Exception {
		
		Integer linhas = (container.getParameter("jtPageSize") != null) ? Integer.valueOf(container.getParameter("jtPageSize")) : 10;
		
		Integer paginacao = (container.getParameter("jtStartIndex") != null) ? Integer.valueOf(container.getParameter("jtStartIndex")) / linhas : 0;
		
		Collection rows = this.load${actionName}Table(paginacao,linhas);
		
		String [] columns = {
					"id",
#set($i=0)
#set($limit=$parametro.tableColumns.size() - 1)
#foreach($column in $parametro.tableColumns)
#if($i != $limit)
#if($column.name)
					"$column.name",
#else
					"$column",
#end
#else
#if($column.name) 
					"$column.name"
#else
					"$column"
#end
#end
#set($i=$i+1)
#end
			};
		
		JSONArray array = new JSONArray();
                
        if(rows != null && rows.size() > 0) {
            
            java.lang.Class classe = rows.toArray()[0].getClass();
            
            java.lang.reflect.Method [] methods = classe.getSuperclass().getDeclaredMethods();
                        
            
            for(Object row : rows) {
            
                JSONObject obj = new JSONObject();

                for(int i = 0; i < columns.length; i++) {
                
                    for(int j = 0; j < methods.length; j++) {
            
                        String methodName = "get".concat(columns[i].subSequence(0,1).toString().toUpperCase().concat(columns[i].substring(1)));
                        
                        if(methods[j].getName().equals(methodName)) {
            
                            obj.put(columns[i], String.valueOf(methods[j].invoke(row)));
                            
                            break;
                            
                        }
            
                    }
            
                }
                
            	array.add(obj);
            
            }
        }
        
        obj.put("Result","OK");
        obj.put("TotalRecordCount", this.get${actionName}TableLength());
        obj.put("Records",array);
        
        container.setContentType("application/json;charset=UTF-8");
        
        container.getWriter().write(obj.toString());

	}
#end
#end
#end

	protected java.util.Collection<String> getModoOperacao(ViewContainer container) {
		return getModoOperacao(this.getNomeCasoUso(), container);
	}
	
	protected String getNomeCasoUso() {
		return "${controller.useCase.package.webModuleName}${controller.useCase.actionPath}.action";
	}
}

#end
