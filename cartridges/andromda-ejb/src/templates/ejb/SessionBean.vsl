#parse("templates/ejb/SessionEJBGlobals.vm")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SessionBean.vsl in andromda-ejb-cartridge-coppetec.
//
#if ($stringUtils.isNotBlank($service.packageName))
package $service.packageName;
#end

#foreach ($serviceRef in $service.serviceReferences)
import ${serviceRef.targetElement.fullyQualifiedName}Home;
#end
#set ($colOperation = false)
#foreach ($operation in $service.operations)
#if($operation.returnType.collectionType || $operation.returnType.listType || $operation.returnType.setType )
#set ($colOperation = true)
#end
#end
#if ($colOperation == true)
#set ($util = "${stringUtils.replace($utilDir,'/','.')}")
import ${customTypesPackage}.${util}.PaginationStrategy;
#end

/**
$service.getDocumentation(" * ")
 */
public abstract class ${service.name}Bean
#if ($service.generalization)
	extends ${service.generalization.fullyQualifiedName}Impl
#end
#if($ejb3 == 'true')
	implements ${service.name}, ${service.name}Local
#else
	implements javax.ejb.SessionBean, ${service.name}BI
#end
{

#if ($service.ejbStateful)
	// --------------- attributes ---------------------
#foreach ( $attribute in $service.attributes )
#set ($attributeTypeName = $attribute.type.fullyQualifiedName)

	protected $attributeTypeName $attribute.name;

	/**
$attribute.getDocumentation("	 * ")
	 */
	public $attributeTypeName ${attribute.getterName}()
	{
		return $attribute.name;
	}

	public void ${attribute.setterName}($attributeTypeName newValue)
	{
		$attribute.name = newValue;
	}

#end
#end
	// ---------------- business methods  ----------------------

#set($webService = $service.hasStereotype("$webSrv"))
##
#foreach ($operation in $service.operations)
#set ($listaArgumentos = '')
#set ($return = '')
#if($webService)
#renderParametersWS($operation $listaArgumentos true)
#renderReturnWS($operation $return)
#else
#renderParameters($operation $listaArgumentos true)
#set($return = $operation.returnType.fullyQualifiedName)
#end
##
#set($exception = "")
#if ($operation.exceptionsPresent)
#set($exception = "throws $operation.exceptionList")
#end
#if(!$operation.returnType.collectionType && !$operation.returnType.listType && !$operation.returnType.setType )
	$operation.visibility abstract $return handle${stringUtils.capitalize(${operation.name})} ($listaArgumentos) $exception;
#end

	/**
$operation.getDocumentation("	 * ")
	 */
	$operation.visibility  $return ${operation.name} ($listaArgumentos) $exception {
#if($ejbSecurityEnabled && !$webService && !${service.openAccess})
#renderSecurityBody($operation)
#else
#renderOperationBody($operation $service)
#end
	}

## [MOISES-COPPETEC]
## Código para gerar métodos que receba o grupo a ser carregado na paginação, caso este método retorne uma coleção
#if($operation.returnType.collectionType || $operation.returnType.listType || $operation.returnType.setType )
#set ($listaArgumentos = '')
#set ($return = '')
#if($webService)
#renderParametersWSPaginacao($operation $listaArgumentos true)
#renderReturnWS($operation $return)
#else
#renderParametersPaginacao($operation $listaArgumentos true)
#set($return = $operation.returnType.fullyQualifiedName)
#end

#set($exception = "")
#if ($operation.exceptionsPresent)
#set($exception = "throws $operation.exceptionList")
#end
	$operation.visibility  abstract $return handle${stringUtils.capitalize(${operation.name})} ($listaArgumentos) $exception;

	/**
$operation.getDocumentation("	 * ")
	 */
	
	$operation.visibility  $return ${operation.name} ($listaArgumentos) $exception {
		return ${operation.name}(#if(${operation.argumentNames} && !${operation.argumentNames.isEmpty()})$operation.argumentNames, #end paginacao);
	}
	
	$operation.visibility  $return ${operation.name} ($listaArgumentos) $exception {
#if($ejbSecurityEnabled && !${service.openAccess})
#renderSecurityBodyPagination($operation)
#else
#renderOperationBodyPagination($operation $service)
#end
	}
#end
#end

#foreach ($dependencia in $service.sourceDependencies)
#if($dependencia.targetElement.FullyQualifiedName.indexOf(".${modelPackageName}.") > 0)
#if($ejbSecurityEnabled)
#renderSecurityManipula("delete" $dependencia ${service.openAccess})
#renderSecurityManipula("filter" $dependencia ${service.openAccess})
#renderSecurityManipula("insert" $dependencia ${service.openAccess})
#renderSecurityManipula("insertOrUpdate" $dependencia ${service.openAccess})
#renderSecurityManipula("list" $dependencia ${service.openAccess})
#renderSecurityManipula("select" $dependencia ${service.openAccess})
#renderSecurityManipula("update" $dependencia ${service.openAccess})
#renderSecurityManipula("export" $dependencia ${service.openAccess})
#renderSecurityManipula("import" $dependencia ${service.openAccess})

##	public  java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> handleManipula${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name}), ${customTypesPackage}.${actionPackageName}.Action action) throws ${customTypesPackage}.${actionPackageName}.ActionException
##	{
##		try{ 
##			return action.execute((${dependencia.targetElement.fullyQualifiedName}Abstract)$stringUtils.lowerCase(${dependencia.targetElement.name}));   
##		} catch (${customTypesPackage}.${modelPackageName}.DAOException e) {
##			throw new ${customTypesPackage}.${actionPackageName}.ActionException(e);
##		}
##	}	  	
##public  java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> manipula${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name}), ${customTypesPackage}.${actionPackageName}.Action action) throws ${customTypesPackage}.${actionPackageName}.ActionException{						 		
##		 boolean responsibleSession = false;
##		 try{
##		 responsibleSession = ${customTypesPackage}.${modelPackageName}.AbstractDAO.getSession();
##		 return handleManipula${dependencia.targetElement.name}($stringUtils.lowerCase(${dependencia.targetElement.name}), action);	 
##		 } finally {		 				 			
##			if(responsibleSession)
##				${customTypesPackage}.${modelPackageName}.AbstractDAO.closeSession();
##		}
##		
##		
##	 }
		
#end

	public java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> handleManipula${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name}), ${customTypesPackage}.${actionPackageName}.Action action) throws ${customTypesPackage}.${actionPackageName}.ActionException {
		try { 
			return action.execute((${dependencia.targetElement.fullyQualifiedName}Abstract)$stringUtils.lowerCase(${dependencia.targetElement.name}));
		} catch (${customTypesPackage}.${modelPackageName}.DAOException e) {
			throw new ${customTypesPackage}.${actionPackageName}.ActionException(e);
		}
	}

	public java.util.List<${customTypesPackage}.${modelPackageName}.AbstractEntity> manipula${dependencia.targetElement.name}(${dependencia.targetElement.FullyQualifiedName} $stringUtils.lowerCase(${dependencia.targetElement.name}), ${customTypesPackage}.${actionPackageName}.Action action) throws ${customTypesPackage}.${actionPackageName}.ActionException {
		boolean responsibleSession = false;
		try {
			responsibleSession = ${customTypesPackage}.${modelPackageName}.AbstractDAO.getSession();
			return handleManipula${dependencia.targetElement.name}($stringUtils.lowerCase(${dependencia.targetElement.name}), action);
		} finally {
			if(responsibleSession)
				${customTypesPackage}.${modelPackageName}.AbstractDAO.closeSession();
		}
	}
#end
#end

	protected javax.ejb.SessionContext ctx = null;

	public void setSessionContext(javax.ejb.SessionContext ctx) {
		this.ctx = ctx;
	}

	// ---------------- create methods -------------------------

	public void ejbCreate () throws javax.ejb.CreateException {
	}

	public void ejbPostCreate () throws javax.ejb.CreateException {
	}

#if ($service.ejbStateful)
	// ---------------- create methods with separate attributes --------------------

	public void ejbCreate $service.operationCallFromAttributes throws javax.ejb.CreateException {
#foreach ($attribute in $service.attributes)
		${attribute.setterName} (${attribute.name});
#end
	}

	public void ejbPostCreate $service.operationCallFromAttributes throws javax.ejb.CreateException {
	}

#end
	/**
	 * Returns the "ServiceBI" for a given service.
	 * 
	 * Usage: ServiceBI serviceBI = getService(ServiceBI.class);
	 * 
	 * @param clazz The "ServiceBI.class"
	 * @return The service returned.
	 * @throws Exception
	 */
	protected <T> T getService(Class<T> clazz) {
		return br.ufrj.coppetec.ServiceLocator.instance().getServiceBI(clazz);
	}
#if($ejb3 == 'false')

	public void ejbRemove() {
	}

	public void ejbPassivate() {
	}

	public void ejbActivate() {
	}
#end
}