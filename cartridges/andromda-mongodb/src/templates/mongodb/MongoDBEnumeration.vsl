// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateEnumeration.vsl in andromda-hibernate-cartridge.
//
#if ($stringUtils.isNotBlank($enumTypesPackage))
#set ($packageName = $enumTypesPackage)
#else
#set ($packageName = $enumeration.packageName)
#end
#set ($generatedFile = "${stringUtils.replace($packageName, '.', '/')}/${enumeration.enumerationName}.java")
#if ($stringUtils.isNotBlank($enumeration.packageName))
package $enumeration.packageName;
#end

import ${mongoDBUtils.hibernatePackage}.HibernateException;

import java.sql.Types;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.SQLException;
##
#set ($sharp = "#")

/**
$enumeration.getDocumentation(" * ")
 */
public final class $enumeration.enumerationName
    extends $enumeration.name
    implements java.io.Serializable,
               java.lang.Comparable,
               ${mongoDBUtils.hibernateUserTypePackage}.UserType
{

    private static final int[] SQL_TYPES = {Types.VARCHAR};

    /**
     * Default constructor.  Hibernate needs the default constructor
     * to retrieve an instance of the enum from a JDBC resultset.
     * The instance will be converted to the correct enum instance
     * in {@link ${sharp}nullSafeGet(java.sql.ResultSet, java.lang.String[], java.lang.Object)}.
     */
    public ${enumeration.enumerationName}()
    {
        super();
    }

    /**
     *  @see ${mongoDBUtils.hibernateUserTypePackage}.UserType${sharp}sqlTypes()
     */
    public int[] sqlTypes()
    {
        return SQL_TYPES;
    }

    /**
     *  @see ${mongoDBUtils.hibernateUserTypePackage}.UserType${sharp}deepCopy(java.lang.Object)
     */
    public Object deepCopy(Object value) throws HibernateException
    {
        // Enums are immutable - nothing to be done to deeply clone it
        return value;
    }

    /**
     *  @see ${mongoDBUtils.hibernateUserTypePackage}.UserType${sharp}isMutable()
     */
    public boolean isMutable()
    {
        // Enums are immutable
        return false;
    }

    /**
     *  @see ${mongoDBUtils.hibernateUserTypePackage}.UserType${sharp}equals(java.lang.Object, java.lang.Object)
     */
    public boolean equals(Object x, Object y) throws HibernateException
    {
        return (x == y) || (x != null && y != null && y.equals(x));
    }

    /**
     * @see ${mongoDBUtils.hibernateUserTypePackage}.UserType${sharp}returnedClass()
     */
    public Class returnedClass()
    {
        return ${enumeration.name}.class;
    }

    /**
     *  @see ${mongoDBUtils.hibernateUserTypePackage}.UserType${sharp}nullSafeGet(java.sql.ResultSet, java.lang.String[], java.lang.Object)
     */
    public Object nullSafeGet(ResultSet resultSet, String[] values, Object owner) throws HibernateException, SQLException
    {
#if ($enumeration.literalType.primitive)
#set ($valueAssignment = "${enumeration.literalType.wrapperName}.valueOf(java.lang.String.valueOf(resultSet.getObject(values[0]))).${enumeration.literalType.fullyQualifiedName}Value()")
#else
#set ($valueAssignment = "${enumeration.literalType.fullyQualifiedName}.valueOf(java.lang.String.valueOf(resultSet.getObject(values[0])))")
#end
        $enumeration.literalType.fullyQualifiedName value = null;
	  try{
		value = $valueAssignment;
        }catch(Exception e){        	
        }
        return resultSet.wasNull() ? null : ${enumeration.fromOperationName}(value);

    }

    /**
     * @see ${mongoDBUtils.hibernateUserTypePackage}.UserType${sharp}nullSafeSet(java.sql.PreparedStatement, java.lang.Object, int)
     */
    public void nullSafeSet(PreparedStatement statement, Object value, int index) throws HibernateException, SQLException
    {
        if (value == null)
        {
            statement.setNull(index, Types.VARCHAR);
        }
        else
        {
#if ($enumeration.literalType.primitive)
#set ($typeName = $enumeration.literalType.wrapperName)
#else
#set ($typeName = $enumeration.literalType.fullyQualifiedName)
#end
            statement.setObject(index, ${typeName}.valueOf(java.lang.String.valueOf(value)));
        }
    }
#if ($hibernateVersion == "3")

    /**
     * @see ${mongoDBUtils.hibernateUserTypePackage}.UserType${sharp}replace(Object original, Object target, Object owner)
     */
    public Object replace(Object original, Object target, Object owner)
    {
        return original;
    }

    /**
     * @see ${mongoDBUtils.hibernateUserTypePackage}.UserType${sharp}assemble(java.io.Serializable cached, Object owner)
     */
    public Object assemble(java.io.Serializable cached, Object owner)
    {
        return cached;
    }

    /**
     * @see ${mongoDBUtils.hibernateUserTypePackage}.UserType${sharp}assemble(Object value)
     */
     public java.io.Serializable disassemble(Object value)
     {
        return (java.io.Serializable)value;
     }

    /**
     * @see ${mongoDBUtils.hibernateUserTypePackage}.UserType${sharp}assemble(Object value)
     */
     public int hashCode(Object x)
     {
        return x.hashCode();
     }
#end
}