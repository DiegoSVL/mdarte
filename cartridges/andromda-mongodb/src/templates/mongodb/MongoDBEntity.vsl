#set ($generatedFile = "${entity.packagePath}/${entity.entityName}MongoDBAbstract.java")
#set ($gerar = false)
#if($entity.document)
#set ($gerar = true)
#end
#if($gerar)

// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: MongoDBEntity.vsl in andromda-mongodb-cartridge.
// 
#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;
#end

#foreach($temp in $entity.allGeneralizations)
#set($pai = $temp)
#end

#if(!$pai)
#set($pai = $entity)
#end

import org.bson.types.ObjectId;
import com.mongodb.BasicDBList;
#set ($sharp = "#")

/**
$entity.getDocumentation(" * ")
 */
public abstract class ${entity.entityName}MongoDBAbstract
#set ($securityEnabled = $stringUtils.isNotBlank($securityRealm))
#if($entity.generalization)
    extends $entity.generalization.fullyQualifiedEntityImplementationName implements ${entity.fullyQualifiedName}MongoDB
#if($securityEnabled && $entity.hasExactStereotype("User"))
	 ,accessControl.Operador
#end
#else
    extends  ${entity.fullyQualifiedName}MongoDB implements java.io.Serializable
#if($securityEnabled && $entity.hasExactStereotype("User"))
	,accessControl.Operador
#end

#end
#foreach ( $parent in $entity.abstractions)
        , ${parent.packageName}.$stringUtils.capitalize(${parent.name})
#end
{
	private final String ENTITY_KEY = "$entity.packageName.${entity.entityName}Abstract";
    
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = ${entity.serialVersionUID}L;

    public ${entity.entityName}MongoDBAbstract(){
    }
    
#set ($identifiers = $entity.getIdentifiers(false))
    
#if(!$entity.abstract && $identifiers && $identifiers.size > 0)
    #renderConstructorMethod($entity $entity.entityName $identifiers)
#end



#foreach ( $attribute in $entity.attributes )
#set ($typeName = $attribute.type.fullyQualifiedName)
#if ($attribute.containsEmbeddedObject)
#set ($typeName = $attribute.type.fullyQualifiedEntityName)
#end


    private $typeName $attribute.name;

    /**
$attribute.getDocumentation("     * ")
     */
    $attribute.visibility $typeName ${attribute.getterName}()
    {
#if ($attribute.identifier)
		if (this.containsField("_id")) {
#else
		if (this.containsField("$attribute.name")) {
#end
#if ($attribute.type.name.equals("Integer"))
			$attribute.type.name value = Integer.valueof(this.getInt("$attribute.name"));
#elseif ($attribute.type.name.equals("Double"))
			$attribute.type.name value = this.getDouble("$attribute.name");
#elseif ($attribute.type.name.equals("Date"))
			$attribute.type.name value = this.getDate("$attribute.name");
#elseif ($attribute.type.name.equals("boolean"))
			$attribute.type.name value = this.getBoolean("$attribute.name");
#elseif ($attribute.type.name.equals("Long"))
#if ($attribute.identifier)
			$attribute.type.name value = this.getLong("_id");
#else
			$attribute.type.name value = this.getLong("$attribute.name");
#end
#elseif ($attribute.type.name.equals("String"))
			$attribute.type.name value = this.getString("$attribute.name");
#else
			$attribute.type.name value = ($attribute.type.name) this.get("$attribute.name");
#end
        return value;
		}
		else return null;
		//return this.${attribute.name};
    }
    
#if($attribute.findTaggedValue($throwsVetoException).equals("true"))	
    $attribute.visibility void ${attribute.setterName}(${typeName} $attribute.name) throws $exceptionList
    {
#if ($attribute.identifier)
		this.put("_id", ${attribute.name});
#else
		this.put("${attribute.name}", ${attribute.name});
#end
    	this.${attribute.name} = $attribute.name;
    }
#else
    $attribute.visibility void ${attribute.setterName}(${typeName} $attribute.name)
    {
#if ($attribute.identifier)
		this.put("_id", ${attribute.name});
#else
		this.put("${attribute.name}", ${attribute.name});
#end
		this.${attribute.name} = $attribute.name;
    }    
#end

#end

## Generate the associations
#foreach ($associationEnd in $entity.associationEnds)
#set ($target = $associationEnd.otherEnd)
#if (!$target.aggregation && ($target.navigable || $associationEnd.child))

#set ($tipo = $target.getterSetterTypeName)
#if ($tipo.indexOf(".${modelPackageName}.") > 0)
#set ($tipo = $tipo.concat("Abstract"))
#else
#set($tipo = $target.getterSetterTypeName)   
#end

#if ($target.many)
    private $tipo $target.name = $target.collectionTypeImplementation;
#else
    private $tipo $target.name;
#end

    /**
$target.getDocumentation("     * ")
     */
#if ($target.many)
	public $tipo ${target.getterName}()
    {
		if (this.containsField("$target.name")) {
			BasicDBList value = (BasicDBList) this.get("${target.name}");
			return value;
		}
		else return null;	
    }

    public void ${target.setterName}($target.getterSetterTypeName ${target.name})    
    {
		this.put("${target.name}", ${target.name});
    	this.${target.name} = ($tipo)$target.name;
    }
#else
    public $target.getterSetterTypeName ${target.getterName}()
    {
		if (this.containsField("$target.name")) {
			$target.getterSetterTypeName value = ($target.getterSetterTypeName) this.get("$target.name");
			return value;
		}
		else return null;	
    }

    public void ${target.setterName}($target.getterSetterTypeName ${target.name})    
    {
		this.put("${target.name}", ${target.name});
    	this.${target.name} = ($tipo)$target.name;
    }
#end
    
#end
#end

## (MDArte) Codigo para gerar get's com acesso a paginacao 
#foreach ($associationEnd in $entity.associationEnds)
#set ($target = $associationEnd.otherEnd)
#if (!$target.aggregation && ($target.navigable || $associationEnd.child))
#if ($target.many)

    /*public $target.getterSetterTypeName ${target.getterName}(Integer paginacao)
    {
    	try {
#set($parameters = "this.getId(), paginacao")
                return ${entity.name}MongoDBDAOImpl.${target.getterName}By${entity.name}($parameters);
        } catch(DAOException daoe) {
              daoe.printStackTrace();
        }
        return null;
    }*/

#end
#end
#end
## Fim 

   public MongoDBAbstractEntity getInstance(){
#if(!$entity.abstract)
   	return new ${entity.entityName}MongoDBImpl();
#else
   	return null;
#end	
   }	
   
#foreach($temp in $entity.allGeneralizations)
#set($pai = $temp)
#end

#if(!$pai)
#set($pai = $entity)
#end

   public boolean instanceOf(Class<?> otherClass) {
	return otherClass.isAssignableFrom(get${pai.entityName}Class());
   }

	

    public Class<?> get${pai.entityName}Class() {
        return ${entity.entityName}MongoDBImpl.class;
    }	
    
}
#end