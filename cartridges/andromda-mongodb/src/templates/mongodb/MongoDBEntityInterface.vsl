#set ($generatedFile = "${entity.packagePath}/${entity.name}MongoDB.java")
#set ($gerar = false)
#if($entity.document)
#set ($gerar = true)
#end
#if($gerar)
// license-header java merge-point
// Attention: Generated code! Do not modify by hand!
// Generated by: MongoDBEntityInterface.vsl in andromda-mongodb-cartridge.
//

package $entity.packageName;


/**
$entity.getDocumentation(" * ")
 */
 
public abstract class ${entity.name}MongoDB extends MongoDBAbstractEntity
#if($entity.generalization)
#set ($generalizacao = ${entity.generalization.fullyQualifiedName})
   , ${generalizacao}
#end
{

#foreach ( $attribute in $entity.attributes )
#set ($typeName = $attribute.type.fullyQualifiedName)
#if ($attribute.containsEmbeddedObject)
#set ($typeName = $attribute.type.fullyQualifiedEntityName)
#end

    $attribute.visibility abstract $typeName ${attribute.getterName}();

    $attribute.visibility abstract void ${attribute.setterName}(${typeName} $attribute.name);
#end

## Generate the associations
#foreach ($associationEnd in $entity.associationEnds)
#set ($target = $associationEnd.otherEnd)
#if (!$target.aggregation && ($target.navigable || $associationEnd.child))
#set ($tipo = ${target.getterSetterTypeName})
#set ($tipoEntidade = ${target.type.fullyQualifiedName})
    public abstract ${tipo} ${target.getterName}();

    public abstract void ${target.setterName}(${tipo} ${target.name});

#if ($associationEnd.navigable)
#set($exception = "")
    public abstract void ${target.setterName}Inverse(${tipo} ${target.name}) $exception;
#if($target.many)
#set($exception = "")

    public abstract void add${stringUtils.capitalize($target.name)}(${tipoEntidade}MongoDB ${stringUtils.uncapitalize($target.type.name)}Temp) $exception;

    public abstract void remove${stringUtils.capitalize($target.name)}(${tipoEntidade}MongoDB ${stringUtils.uncapitalize($target.type.name)}Temp) $exception;

#end
#end
#end
#end
    public abstract MongoDBAbstractEntity getInstance();

    public abstract boolean instanceOf(Class<?> otherClass);
}
#end